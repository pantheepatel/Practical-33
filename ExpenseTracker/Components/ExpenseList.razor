@page "/"
@page "/manage-expense"
@inject NavigationManager NavigationManager
@inject ExpenseService expenseService
@inject IJSRuntime jsRuntime

<h3 class="text-center text-capitalize my-3 bg-black text-white py-2 fw-bold">ExpenseList</h3>

@if (expenses.Count != 0)
{
    <table class="table table-bordered table-light" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                <th>Title</th>
                <th>Note</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
                <th>Payment Method</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses)
            {
                <tr>
                    <td>@expense.Title</td>
                    <td class="w-25" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">@expense.Description</td>
                    <td>₹ @expense.Amount.ToString()</td>
                    <td>@expense.Date.ToShortDateString()</td>
                    <td>@expense.Category.ToString()</td>
                    <td>@expense.AccountType.ToString()</td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="()=>NavigateToViewExpense(expense.ExpenseId)">View</button>
                        <button class="btn btn-sm btn-primary" @onclick="()=>NavigateToEditExpense(expense.ExpenseId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="()=>NavigateToDeleteExpense(expense.ExpenseId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No Products to display!</p>
}
<h5>Total Amount: @totalAmount</h5>
@code {
    private List<Expense> expenses = new();
    protected override void OnInitialized()
    {           
        expenses = expenseService.GetExpenses();
    }
    private void NavigateToEditExpense(Guid id)
    {
        NavigationManager.NavigateTo($"/edit-expense/{id}");
    }
    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/edit-expense");
    }
    private void NavigateToViewExpense(Guid id)
    {
        NavigationManager.NavigateTo($"/view-expense/{id}");
    }
    private async Task NavigateToDeleteExpense(Guid id)
    {
        bool confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this expense?");
        if (confirm)
        {
            expenseService.DeleteExpense(id);
            expenses = expenseService.GetExpenses();
        }
    }
    private decimal totalAmount => expenses.Sum(e => e.Amount);
}
